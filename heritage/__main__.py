import logging

from telegram import (
    Update,
    InputMediaPhoto,
    ReplyKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from heritage.cfg import Settings
from heritage.pkg import PastvuAPI
from heritage.usecase import MediaGroupUseCase


api = PastvuAPI()
settings = Settings()
use_case = MediaGroupUseCase(api)

keyboard = [["üåç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"], ["üîé –ï—â—ë —Ñ–æ—Ç–æ"]]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    message_html = f"""
    –ü—Ä–∏–≤–µ—Ç, {update.effective_user.mention_html()} üëã

    –≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–æ—Ç–æ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é, –≤–∑—è—Ç—ã—Ö —Å <a href="https://pastvu.com/">pastvu</a>

    –î–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π
    """
    await update.message.reply_html(
        message_html,
        reply_markup=reply_markup,
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text(
        "–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –∞—Ä—Ö–∏–≤–æ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ç–æ. –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ üïí"
    )


async def hand_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Hand text input from user."""
    await update.message.reply_text("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é üåç")


async def get_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Get photos by geopoint."""
    logger.info(
        f"Get location=({update.message.location.latitude}, {update.message.location.longitude}) from user={update.effective_user.username}"
    )
    await update.message.reply_media_group(
        media=[
            InputMediaPhoto(photo.file, caption=photo.caption)
            for photo in use_case.get_photos(
                update.message.location.latitude, update.message.location.longitude
            )
        ]
    )


def main() -> None:
    """Start the bot."""
    application = Application.builder().token(settings.tg_token).build()

    # help logic
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # main logic
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, hand_text_input)
    )

    application.add_handler(
        MessageHandler(filters.LOCATION & ~filters.COMMAND, get_photos)
    )

    application.run_polling()


if __name__ == "__main__":
    main()
